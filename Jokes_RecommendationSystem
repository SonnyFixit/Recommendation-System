import tkinter as tk
from tkinter import filedialog, scrolledtext, messagebox
import sqlite3
from Jokes_TextPreprocessing import read_and_save_to_database

class JokesApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Jokes App")
        self.database_path = 'jokes_database.db'
        self.connection = None

        self.create_widgets()

    def create_widgets(self):
        self.connect_button = tk.Button(self.root, text="Connect to Database", command=self.connect_to_database)
        self.connect_button.pack(pady=10)

        self.import_button = tk.Button(self.root, text="Import HTML Files", command=self.import_files)
        self.import_button.pack(pady=10)

        self.show_all_button = tk.Button(self.root, text="Show All Texts", command=self.show_all_texts)
        self.show_all_button.pack(pady=10)

        self.show_random_button = tk.Button(self.root, text="Show Random Text", command=self.show_random_text)
        self.show_random_button.pack(pady=10)

        self.text_area = scrolledtext.ScrolledText(self.root, width=60, height=20, wrap=tk.WORD)
        self.text_area.pack(pady=10)

    def connect_to_database(self):
        try:
            self.connection = sqlite3.connect(self.database_path)
            messagebox.showinfo("Database Connected", "Successfully connected to the database.")
        except Exception as e:
            messagebox.showerror("Database Connection Error", f"Error: {str(e)}")

    def import_files(self):
        if not self.connection:
            messagebox.showinfo("Database Not Connected", "Please connect to the database first.")
            return

        folder_path = filedialog.askdirectory(title="Select Folder with HTML Files")
        if folder_path:
            read_and_save_to_database(self.connection, folder_path)
            messagebox.showinfo("Import Complete", "HTML files imported successfully!")

    def show_all_texts(self):
        if not self.connection:
            messagebox.showinfo("Database Not Connected", "Please connect to the database first.")
            return

        cursor = self.connection.cursor()
        cursor.execute('SELECT file_name, content FROM jokes')
        all_texts = cursor.fetchall()

        self.text_area.delete(1.0, tk.END)  # Clear the text area

        for i, (file_name, text) in enumerate(all_texts, start=1):
            self.text_area.insert(tk.END, f"Joke {i} - {file_name}\n{text}\n\n{'-' * 40}\n\n")

    def show_random_text(self):
        if not self.connection:
            messagebox.showinfo("Database Not Connected", "Please connect to the database first.")
            return

        cursor = self.connection.cursor()
        cursor.execute('SELECT file_name, content FROM jokes ORDER BY RANDOM() LIMIT 1')
        random_text = cursor.fetchone()

        self.text_area.delete(1.0, tk.END)  # Clear the text area
        self.text_area.insert(tk.END, f"Joke - {random_text[0]}\n{random_text[1]}\n\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = JokesApp(root)
    root.mainloop()
