import tkinter as tk
import os
import sqlite3
from tkinter import filedialog, scrolledtext
from PIL import Image, ImageTk

class JokesApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Jokes App")
        self.database_path = None
        self.connection = None
        self.connection_status = tk.StringVar()
        self.current_db_label = tk.StringVar()

        self.create_widgets()

    def create_widgets(self):
        self.connection_status_label = tk.Label(self.root, text="Database Connection Status:")
        self.connection_status_label.pack(side=tk.TOP, pady=5)

        self.status_label = tk.Label(self.root, textvariable=self.connection_status)
        self.status_label.pack(side=tk.TOP)

        self.current_db_label_label = tk.Label(self.root, text="Currently Connected Database:")
        self.current_db_label_label.pack(side=tk.TOP, pady=5)

        self.current_db_label_display = tk.Label(self.root, textvariable=self.current_db_label)
        self.current_db_label_display.pack(side=tk.TOP)

        self.load_icons()
        self.update_connection_status()

        self.show_all_texts_button = tk.Button(self.root, text="Show All Texts", command=self.show_all_texts)
        self.show_all_texts_button.pack(pady=10)

        self.show_random_text_button = tk.Button(self.root, text="Show Random Text", command=self.show_random_text)
        self.show_random_text_button.pack(pady=10)

        self.show_all_records_button = tk.Button(self.root, text="Show All Ratings Records", command=self.show_all_records)
        self.show_all_records_button.pack(pady=10)

        self.text_area = scrolledtext.ScrolledText(self.root, width=60, height=20, wrap=tk.WORD)
        self.text_area.pack(pady=10)

        self.update_connection_status()

    def load_icons(self):
        icon_folder_path = r'C:\GitRepositories\Recommendation-System\Icons'
        self.icon_connected = ImageTk.PhotoImage(Image.open(os.path.join(icon_folder_path, "Status_Okay.png")))
        self.icon_disconnected = ImageTk.PhotoImage(Image.open(os.path.join(icon_folder_path, "Status_NotConnected.png")))
        self.icon_error = ImageTk.PhotoImage(Image.open(os.path.join(icon_folder_path, "Status_Error.png")))

    def connect_to_database(self, db_filename):
        try:
            self.connection = sqlite3.connect(db_filename)
            self.database_path = db_filename
            self.update_connection_status()
        except Exception as e:
            self.connection = None
            self.connection_status.set(f"Error: {str(e)}")
            self.status_label.config(image=self.icon_error)

    def update_connection_status(self):
        if self.connection:
            status_text = f"Connected to {os.path.basename(self.database_path)}\nDatabase location: {os.path.abspath(self.database_path)}"
            self.connection_status.set(status_text)
            self.current_db_label.set(f"{os.path.basename(self.database_path)} - {os.path.abspath(self.database_path)}")
            self.status_label.config(image=self.icon_connected)
        else:
            self.connection_status.set("Disconnected")
            self.current_db_label.set("No database connected")
            self.status_label.config(image=self.icon_disconnected)

    def show_all_texts(self):
        self.connect_to_database("Jokes_TextData.db")
        self.execute_query_and_display('SELECT file_name, content FROM jokes')

    def show_random_text(self):
        self.connect_to_database("Jokes_TextData.db")
        self.execute_query_and_display('SELECT file_name, content FROM jokes ORDER BY RANDOM() LIMIT 1')

    def show_all_records(self):
        self.connect_to_database("Ratings_Test.db")
        self.execute_query_and_display('SELECT * FROM dane')

    def execute_query_and_display(self, query):
        if not self.connection:
            self.connection_status.set("Please connect to the database first.")
            self.status_label.config(image=self.icon_disconnected)
            return

        cursor = self.connection.cursor()
        cursor.execute(query)
        result = cursor.fetchall()

        self.text_area.delete(1.0, tk.END)  # Clear the text area

        # Get column names
        column_names = [description[0] for description in cursor.description]

        # Print each record with column labels
        for index, record in enumerate(result, start=1):
            self.text_area.insert(tk.END, f"Record {index}:\n")
            for column_name, value in zip(column_names, record):
                self.text_area.insert(tk.END, f"{column_name}: {value}\n")
            self.text_area.insert(tk.END, '-' * 40 + '\n')

if __name__ == "__main__":
    root = tk.Tk()
    app = JokesApp(root)
    root.mainloop()
